// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: libs/proto/services/micromicro.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices'
import { Observable } from 'rxjs'

export const protobufPackage = 'micromicro'

/** ! Mensaje vacío (común en operaciones sin payload) */
export interface MicromicroEmpty {}

/** Crear nuevo ejemplo */
export interface CreateMicromicroDto {
  name: string
  description?: string | undefined
}

/** Actualizar un ejemplo */
export interface UpdateMicromicroDto {
  id: string
  micromicro: UpdateMicromicroData | undefined
}

/** Obtener un ejemplo por su ID */
export interface GetMicromicroByIdDto {
  id: string
}

/** Solicitud de paginación por cursor (scroll infinito) */
export interface CursorPaginationRequest {
  /** ID del último elemento visto */
  afterId: string
  /** Elementos siguientes a devolver */
  limit: number
}

/** Lista de múltiples ejemplos (no paginada) */
export interface MicromicroList {
  micromicro: Micromicro[]
}

/** Lista de ejemplos paginada con `page`/`limit` */
export interface PaginatedMicromicro {
  micromicro: Micromicro[]
  total: number
  page: number
  limit: number
}

/** Lista de ejemplos paginada con `cursor` */
export interface CursorPaginatedMicromicro {
  micromicro: Micromicro[]
  nextCursor: string
  hasMore: boolean
}

/** Representación base de un ejemplo */
export interface Micromicro {
  /** ! ID único del ejemplo */
  id: string
  name: string
  description?: string | undefined
}

/** Datos anidados para actualizar un ejemplo */
export interface UpdateMicromicroData {
  name: string
  description?: string | undefined
}

export const MICROMICRO_PACKAGE_NAME = 'micromicro'

/**
 * ================================
 *   📦 Servicio MicromicroService
 * ================================
 *
 * Contratos de comunicación entre el micromicro y el servidor
 * para la gestión de ejemplos en la aplicación.
 */

export interface MicromicroServiceClient {
  /** Crear un nuevo ejemplo */

  createMicromicro(
    request: CreateMicromicroDto
  ): Observable<Micromicro>

  /** Obtener todos los ejemplos (no paginado) */

  getAllMicromicro(
    request: MicromicroEmpty
  ): Observable<MicromicroList>

  /** Obtener un ejemplo por ID */

  getMicromicroById(
    request: GetMicromicroByIdDto
  ): Observable<Micromicro>

  /** Actualizar un ejemplo existente */

  updateMicromicro(
    request: UpdateMicromicroDto
  ): Observable<Micromicro>

  /** Eliminar un ejemplo por ID */

  deleteMicromicro(
    request: GetMicromicroByIdDto
  ): Observable<MicromicroEmpty>

  /** Soporte para scroll infinito (cursor-based pagination) */

  getMicromicroByCursor(
    request: CursorPaginationRequest
  ): Observable<CursorPaginatedMicromicro>
}

/**
 * ================================
 *   📦 Servicio MicromicroService
 * ================================
 *
 * Contratos de comunicación entre el micromicro y el servidor
 * para la gestión de ejemplos en la aplicación.
 */

export interface MicromicroServiceController {
  /** Crear un nuevo ejemplo */

  createMicromicro(
    request: CreateMicromicroDto
  ):
    | Promise<Micromicro>
    | Observable<Micromicro>
    | Micromicro

  /** Obtener todos los ejemplos (no paginado) */

  getAllMicromicro(
    request: MicromicroEmpty
  ):
    | Promise<MicromicroList>
    | Observable<MicromicroList>
    | MicromicroList

  /** Obtener un ejemplo por ID */

  getMicromicroById(
    request: GetMicromicroByIdDto
  ):
    | Promise<Micromicro>
    | Observable<Micromicro>
    | Micromicro

  /** Actualizar un ejemplo existente */

  updateMicromicro(
    request: UpdateMicromicroDto
  ):
    | Promise<Micromicro>
    | Observable<Micromicro>
    | Micromicro

  /** Eliminar un ejemplo por ID */

  deleteMicromicro(
    request: GetMicromicroByIdDto
  ):
    | Promise<MicromicroEmpty>
    | Observable<MicromicroEmpty>
    | MicromicroEmpty

  /** Soporte para scroll infinito (cursor-based pagination) */

  getMicromicroByCursor(
    request: CursorPaginationRequest
  ):
    | Promise<CursorPaginatedMicromicro>
    | Observable<CursorPaginatedMicromicro>
    | CursorPaginatedMicromicro
}

export function MicromicroServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'createMicromicro',
      'getAllMicromicro',
      'getMicromicroById',
      'updateMicromicro',
      'deleteMicromicro',
      'getMicromicroByCursor'
    ]
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method
      )
      GrpcMethod('MicromicroService', method)(
        constructor.prototype[method],
        method,
        descriptor
      )
    }
    const grpcStreamMethods: string[] = []
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method
      )
      GrpcStreamMethod('MicromicroService', method)(
        constructor.prototype[method],
        method,
        descriptor
      )
    }
  }
}

export const MICROMICRO_SERVICE_NAME =
  'MicromicroService'
