// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: libs/proto/services/__project_name_camel__.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices'
import { Observable } from 'rxjs'

export const protobufPackage = '__project_name_camel__'

/** ! Mensaje vacío (común en operaciones sin payload) */
export interface __project_name_pascal__Empty {}

/** Crear nuevo ejemplo */
export interface Create__project_name_pascal__Dto {
  name: string
  description?: string | undefined
}

/** Actualizar un ejemplo */
export interface Update__project_name_pascal__Dto {
  id: string
  __project_name_camel__: Update__project_name_pascal__Data | undefined
}

/** Obtener un ejemplo por su ID */
export interface Get__project_name_pascal__ByIdDto {
  id: string
}

/** Solicitud de paginación por cursor (scroll infinito) */
export interface CursorPaginationRequest {
  /** ID del último elemento visto */
  afterId: string
  /** Elementos siguientes a devolver */
  limit: number
}

/** Lista de múltiples ejemplos (no paginada) */
export interface __project_name_pascal__List {
  __project_name_camel__: __project_name_pascal__[]
}

/** Lista de ejemplos paginada con `page`/`limit` */
export interface Paginated__project_name_pascal__ {
  __project_name_camel__: __project_name_pascal__[]
  total: number
  page: number
  limit: number
}

/** Lista de ejemplos paginada con `cursor` */
export interface CursorPaginated__project_name_pascal__ {
  __project_name_camel__: __project_name_pascal__[]
  nextCursor: string
  hasMore: boolean
}

/** Representación base de un ejemplo */
export interface __project_name_pascal__ {
  /** ! ID único del ejemplo */
  id: string
  name: string
  description?: string | undefined
}

/** Datos anidados para actualizar un ejemplo */
export interface Update__project_name_pascal__Data {
  name: string
  description?: string | undefined
}

export const __project_name_screaming___PACKAGE_NAME = '__project_name_camel__'

/**
 * ================================
 *   📦 Servicio __project_name_pascal__Service
 * ================================
 *
 * Contratos de comunicación entre el __project_name_camel__ y el servidor
 * para la gestión de ejemplos en la aplicación.
 */

export interface __project_name_pascal__ServiceClient {
  /** Crear un nuevo ejemplo */

  create__project_name_pascal__(
    request: Create__project_name_pascal__Dto
  ): Observable<__project_name_pascal__>

  /** Obtener todos los ejemplos (no paginado) */

  getAll__project_name_pascal__(
    request: __project_name_pascal__Empty
  ): Observable<__project_name_pascal__List>

  /** Obtener un ejemplo por ID */

  get__project_name_pascal__ById(
    request: Get__project_name_pascal__ByIdDto
  ): Observable<__project_name_pascal__>

  /** Actualizar un ejemplo existente */

  update__project_name_pascal__(
    request: Update__project_name_pascal__Dto
  ): Observable<__project_name_pascal__>

  /** Eliminar un ejemplo por ID */

  delete__project_name_pascal__(
    request: Get__project_name_pascal__ByIdDto
  ): Observable<__project_name_pascal__Empty>

  /** Soporte para scroll infinito (cursor-based pagination) */

  get__project_name_pascal__ByCursor(
    request: CursorPaginationRequest
  ): Observable<CursorPaginated__project_name_pascal__>
}

/**
 * ================================
 *   📦 Servicio __project_name_pascal__Service
 * ================================
 *
 * Contratos de comunicación entre el __project_name_camel__ y el servidor
 * para la gestión de ejemplos en la aplicación.
 */

export interface __project_name_pascal__ServiceController {
  /** Crear un nuevo ejemplo */

  create__project_name_pascal__(
    request: Create__project_name_pascal__Dto
  ):
    | Promise<__project_name_pascal__>
    | Observable<__project_name_pascal__>
    | __project_name_pascal__

  /** Obtener todos los ejemplos (no paginado) */

  getAll__project_name_pascal__(
    request: __project_name_pascal__Empty
  ):
    | Promise<__project_name_pascal__List>
    | Observable<__project_name_pascal__List>
    | __project_name_pascal__List

  /** Obtener un ejemplo por ID */

  get__project_name_pascal__ById(
    request: Get__project_name_pascal__ByIdDto
  ):
    | Promise<__project_name_pascal__>
    | Observable<__project_name_pascal__>
    | __project_name_pascal__

  /** Actualizar un ejemplo existente */

  update__project_name_pascal__(
    request: Update__project_name_pascal__Dto
  ):
    | Promise<__project_name_pascal__>
    | Observable<__project_name_pascal__>
    | __project_name_pascal__

  /** Eliminar un ejemplo por ID */

  delete__project_name_pascal__(
    request: Get__project_name_pascal__ByIdDto
  ):
    | Promise<__project_name_pascal__Empty>
    | Observable<__project_name_pascal__Empty>
    | __project_name_pascal__Empty

  /** Soporte para scroll infinito (cursor-based pagination) */

  get__project_name_pascal__ByCursor(
    request: CursorPaginationRequest
  ):
    | Promise<CursorPaginated__project_name_pascal__>
    | Observable<CursorPaginated__project_name_pascal__>
    | CursorPaginated__project_name_pascal__
}

export function __project_name_pascal__ServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'create__project_name_pascal__',
      'getAll__project_name_pascal__',
      'get__project_name_pascal__ById',
      'update__project_name_pascal__',
      'delete__project_name_pascal__',
      'get__project_name_pascal__ByCursor'
    ]
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method
      )
      GrpcMethod('__project_name_pascal__Service', method)(
        constructor.prototype[method],
        method,
        descriptor
      )
    }
    const grpcStreamMethods: string[] = []
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method
      )
      GrpcStreamMethod('__project_name_pascal__Service', method)(
        constructor.prototype[method],
        method,
        descriptor
      )
    }
  }
}

export const __project_name_screaming___SERVICE_NAME =
  '__project_name_pascal__Service'
