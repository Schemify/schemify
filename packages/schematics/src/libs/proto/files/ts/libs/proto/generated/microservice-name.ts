// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: libs/proto/services/microserviceName.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices'
import { Observable } from 'rxjs'

export const protobufPackage = 'microserviceName'

/** ! Mensaje vacío (común en operaciones sin payload) */
export interface MicroserviceNameEmpty {}

/** Crear nuevo ejemplo */
export interface CreateMicroserviceNameDto {
  name: string
  description?: string | undefined
}

/** Actualizar un ejemplo */
export interface UpdateMicroserviceNameDto {
  id: string
  microserviceName: UpdateMicroserviceNameData | undefined
}

/** Obtener un ejemplo por su ID */
export interface GetMicroserviceNameByIdDto {
  id: string
}

/** Solicitud de paginación por cursor (scroll infinito) */
export interface CursorPaginationRequest {
  /** ID del último elemento visto */
  afterId: string
  /** Elementos siguientes a devolver */
  limit: number
}

/** Lista de múltiples ejemplos (no paginada) */
export interface MicroserviceNameList {
  microserviceName: MicroserviceName[]
}

/** Lista de ejemplos paginada con `page`/`limit` */
export interface PaginatedMicroserviceName {
  microserviceName: MicroserviceName[]
  total: number
  page: number
  limit: number
}

/** Lista de ejemplos paginada con `cursor` */
export interface CursorPaginatedMicroserviceName {
  microserviceName: MicroserviceName[]
  nextCursor: string
  hasMore: boolean
}

/** Representación base de un ejemplo */
export interface MicroserviceName {
  /** ! ID único del ejemplo */
  id: string
  name: string
  description?: string | undefined
}

/** Datos anidados para actualizar un ejemplo */
export interface UpdateMicroserviceNameData {
  name: string
  description?: string | undefined
}

export const MICROSERVICE_NAME_PACKAGE_NAME = 'microserviceName'

/**
 * ================================
 *   📦 Servicio MicroserviceNameService
 * ================================
 *
 * Contratos de comunicación entre el microserviceName y el servidor
 * para la gestión de ejemplos en la aplicación.
 */

export interface MicroserviceNameServiceClient {
  /** Crear un nuevo ejemplo */

  createMicroserviceName(
    request: CreateMicroserviceNameDto
  ): Observable<MicroserviceName>

  /** Obtener todos los ejemplos (no paginado) */

  getAllMicroserviceName(
    request: MicroserviceNameEmpty
  ): Observable<MicroserviceNameList>

  /** Obtener un ejemplo por ID */

  getMicroserviceNameById(
    request: GetMicroserviceNameByIdDto
  ): Observable<MicroserviceName>

  /** Actualizar un ejemplo existente */

  updateMicroserviceName(
    request: UpdateMicroserviceNameDto
  ): Observable<MicroserviceName>

  /** Eliminar un ejemplo por ID */

  deleteMicroserviceName(
    request: GetMicroserviceNameByIdDto
  ): Observable<MicroserviceNameEmpty>

  /** Soporte para scroll infinito (cursor-based pagination) */

  getMicroserviceNameByCursor(
    request: CursorPaginationRequest
  ): Observable<CursorPaginatedMicroserviceName>
}

/**
 * ================================
 *   📦 Servicio MicroserviceNameService
 * ================================
 *
 * Contratos de comunicación entre el microserviceName y el servidor
 * para la gestión de ejemplos en la aplicación.
 */

export interface MicroserviceNameServiceController {
  /** Crear un nuevo ejemplo */

  createMicroserviceName(
    request: CreateMicroserviceNameDto
  ):
    | Promise<MicroserviceName>
    | Observable<MicroserviceName>
    | MicroserviceName

  /** Obtener todos los ejemplos (no paginado) */

  getAllMicroserviceName(
    request: MicroserviceNameEmpty
  ):
    | Promise<MicroserviceNameList>
    | Observable<MicroserviceNameList>
    | MicroserviceNameList

  /** Obtener un ejemplo por ID */

  getMicroserviceNameById(
    request: GetMicroserviceNameByIdDto
  ):
    | Promise<MicroserviceName>
    | Observable<MicroserviceName>
    | MicroserviceName

  /** Actualizar un ejemplo existente */

  updateMicroserviceName(
    request: UpdateMicroserviceNameDto
  ):
    | Promise<MicroserviceName>
    | Observable<MicroserviceName>
    | MicroserviceName

  /** Eliminar un ejemplo por ID */

  deleteMicroserviceName(
    request: GetMicroserviceNameByIdDto
  ):
    | Promise<MicroserviceNameEmpty>
    | Observable<MicroserviceNameEmpty>
    | MicroserviceNameEmpty

  /** Soporte para scroll infinito (cursor-based pagination) */

  getMicroserviceNameByCursor(
    request: CursorPaginationRequest
  ):
    | Promise<CursorPaginatedMicroserviceName>
    | Observable<CursorPaginatedMicroserviceName>
    | CursorPaginatedMicroserviceName
}

export function MicroserviceNameServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'createMicroserviceName',
      'getAllMicroserviceName',
      'getMicroserviceNameById',
      'updateMicroserviceName',
      'deleteMicroserviceName',
      'getMicroserviceNameByCursor'
    ]
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method
      )
      GrpcMethod('MicroserviceNameService', method)(
        constructor.prototype[method],
        method,
        descriptor
      )
    }
    const grpcStreamMethods: string[] = []
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method
      )
      GrpcStreamMethod('MicroserviceNameService', method)(
        constructor.prototype[method],
        method,
        descriptor
      )
    }
  }
}

export const MICROSERVICE_NAME_SERVICE_NAME =
  'MicroserviceNameService'
