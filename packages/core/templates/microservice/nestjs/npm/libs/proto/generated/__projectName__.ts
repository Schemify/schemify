// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: libs/proto/services/__projectNameCamel__.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices'
import { Observable } from 'rxjs'

export const protobufPackage = '__projectNameCamel__'

/** ! Mensaje vacío (común en operaciones sin payload) */
export interface __ProjectName__Empty {}

/** Crear nuevo ejemplo */
export interface Create__ProjectName__Dto {
  name: string
  description?: string | undefined
}

/** Actualizar un ejemplo */
export interface Update__ProjectName__Dto {
  id: string
  __projectNameCamel__: Update__ProjectName__Data | undefined
}

/** Obtener un ejemplo por su ID */
export interface Get__ProjectName__ByIdDto {
  id: string
}

/** Solicitud de paginación por cursor (scroll infinito) */
export interface CursorPaginationRequest {
  /** ID del último elemento visto */
  afterId: string
  /** Elementos siguientes a devolver */
  limit: number
}

/** Lista de múltiples ejemplos (no paginada) */
export interface __ProjectName__s {
  __projectNameCamel__s: __ProjectName__[]
}

/** Lista de ejemplos paginada con `page`/`limit` */
export interface Paginated__ProjectName__s {
  __projectNameCamel__s: __ProjectName__[]
  total: number
  page: number
  limit: number
}

/** Lista de ejemplos paginada con `cursor` */
export interface CursorPaginated__ProjectName__s {
  __projectNameCamel__s: __ProjectName__[]
  nextCursor: string
  hasMore: boolean
}

/** Representación base de un ejemplo */
export interface __ProjectName__ {
  /** ! ID único del ejemplo */
  id: string
  name: string
  description?: string | undefined
}

/** Datos anidados para actualizar un ejemplo */
export interface Update__ProjectName__Data {
  name: string
  description?: string | undefined
}

export const __ProjectName___PACKAGE_NAME = '__projectNameCamel__'

/**
 * ================================
 *   📦 Servicio __ProjectName__Service
 * ================================
 *
 * Contratos de comunicación entre el cliente y el servidor
 * para la gestión de ejemplos en la aplicación.
 */

export interface __ProjectName__ServiceClient {
  /** Crear un nuevo ejemplo */

  create__ProjectName__(request: Create__ProjectName__Dto): Observable<__ProjectName__>

  /** Obtener todos los ejemplos (no paginado) */

  getAll__ProjectName__s(request: __ProjectName__Empty): Observable<__ProjectName__s>

  /** Obtener un ejemplo por ID */

  get__ProjectName__ById(request: Get__ProjectName__ByIdDto): Observable<__ProjectName__>

  /** Actualizar un ejemplo existente */

  update__ProjectName__(request: Update__ProjectName__Dto): Observable<__ProjectName__>

  /** Eliminar un ejemplo por ID */

  delete__ProjectName__(request: Get__ProjectName__ByIdDto): Observable<__ProjectName__Empty>

  /** Soporte para scroll infinito (cursor-based pagination) */

  get__ProjectName__sByCursor(
    request: CursorPaginationRequest
  ): Observable<CursorPaginated__ProjectName__s>
}

/**
 * ================================
 *   📦 Servicio __ProjectName__Service
 * ================================
 *
 * Contratos de comunicación entre el cliente y el servidor
 * para la gestión de ejemplos en la aplicación.
 */

export interface __ProjectName__ServiceController {
  /** Crear un nuevo ejemplo */

  create__ProjectName__(
    request: Create__ProjectName__Dto
  ): Promise<__ProjectName__> | Observable<__ProjectName__> | __ProjectName__

  /** Obtener todos los ejemplos (no paginado) */

  getAll__ProjectName__s(
    request: __ProjectName__Empty
  ): Promise<__ProjectName__s> | Observable<__ProjectName__s> | __ProjectName__s

  /** Obtener un ejemplo por ID */

  get__ProjectName__ById(
    request: Get__ProjectName__ByIdDto
  ): Promise<__ProjectName__> | Observable<__ProjectName__> | __ProjectName__

  /** Actualizar un ejemplo existente */

  update__ProjectName__(
    request: Update__ProjectName__Dto
  ): Promise<__ProjectName__> | Observable<__ProjectName__> | __ProjectName__

  /** Eliminar un ejemplo por ID */

  delete__ProjectName__(
    request: Get__ProjectName__ByIdDto
  ): Promise<__ProjectName__Empty> | Observable<__ProjectName__Empty> | __ProjectName__Empty

  /** Soporte para scroll infinito (cursor-based pagination) */

  get__ProjectName__sByCursor(
    request: CursorPaginationRequest
  ):
    | Promise<CursorPaginated__ProjectName__s>
    | Observable<CursorPaginated__ProjectName__s>
    | CursorPaginated__ProjectName__s
}

export function __ProjectName__ServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'create__ProjectName__',
      'getAll__ProjectName__s',
      'get__ProjectName__ById',
      'update__ProjectName__',
      'delete__ProjectName__',
      'get__ProjectName__sByCursor'
    ]
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method
      )
      GrpcMethod('__ProjectName__Service', method)(
        constructor.prototype[method],
        method,
        descriptor
      )
    }
    const grpcStreamMethods: string[] = []
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method
      )
      GrpcStreamMethod('__ProjectName__Service', method)(
        constructor.prototype[method],
        method,
        descriptor
      )
    }
  }
}

export const __ProjectName___SERVICE_NAME = '__ProjectName__Service'
